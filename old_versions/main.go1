package main

import (
	"bufio"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"sync"	
)

const (
	locklen = 5
	baseurl = "https://cdn.townofsins.com/media/assets/images/"
)

var mu sync.Mutex
var tries_counter int


var letterRunes = []rune("abcdefghijklmnopqrstuvwxyz")
var letternumbersRunes = []rune("abcdefghijklmnopqrstuvwxyz0123456789")

type Semaphore struct {
	C chan struct{}
}

func (s *Semaphore) Acquire() {
	s.C <- struct{}{}
}
func (s *Semaphore) Release() {
	<-s.C
	mu.Lock()
	tries_counter++
	mu.Unlock()
}

var sem = Semaphore{
	C: make(chan struct{}, 20),
}

func main() {
	var done = make(map[string]bool)

	fdone, err := os.Open("txtfiles\\done.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer fdone.Close()
	scanner := bufio.NewScanner(fdone)
	for scanner.Scan() {
		text := scanner.Text()
		_, ok := done[text]
		if ok {
			continue
		}
		done[text] = true
	}
	fdone.Close()
	file, err := os.Open("txtfiles\\links.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	fdone, err = os.OpenFile("txtfiles\\done.txt", os.O_RDWR|os.O_APPEND|os.O_CREATE, 0777)
	if err != nil {
		panic(err)
	}
	defer fdone.Close()

	scanner = bufio.NewScanner(file)
	for scanner.Scan() {
		text := scanner.Text()
		ntext := strings.TrimSuffix(text, "@2x.webp")
		ntext = strings.TrimSuffix(ntext, ".webp")
		ntext = strings.TrimSuffix(ntext, ".jpg")
		if text != ntext {
			text = ntext[:len(ntext)-6]
		}
		_, ok := done[text]
		if ok {
			continue
		}
		_, err = fdone.WriteString(text + "\n")
		if err != nil {
			panic(err)
		}
		done[text] = true
	}

	var needcheck int
	file, err = os.Open("txtfiles\\check.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	scanner = bufio.NewScanner(file)
	var check = make(map[string]bool)
	for scanner.Scan() {
		text := scanner.Text()
		_, ok := done[text]
		if ok {
			continue
		}
		_, ok = check[text]
		if ok {
			continue
		}
		check[text] = true
		needcheck++
	}

	c := make(chan string)
	fmt.Println("Need check - ", needcheck)
	go func() {
		for url, _ := range check {
			ctime := time.Now()
			fmt.Println("Bruteforcing ", url)
			sgnlCh := make(chan struct{})
			var link [10]int
			var scramble_len int
			var url_suffix string
			used_chars := letterRunes
			if strings.HasPrefix(url, "comics/th/") {
				used_chars = letternumbersRunes
				url_suffix = "@2x.webp"
			} else if strings.HasPrefix(url, "comics_adventure/th/") {
				url_suffix = ".webp"
			} else if strings.HasPrefix(url, "comics_events/th/") {
				url_suffix = ".jpg"
			}

			scramble_len = len(used_chars)
			for {
				var cur_pass string
				var loop bool
				var reset_pos int
				for reset_pos != -1 {
					cur_pass = ""
					for i := locklen - 1; i >= 0; i-- {
						if i < reset_pos {
							link[i] = 0
							//Если текущее значение больше предела
						} else if link[i] >= scramble_len {
							//Устанавливаем границу обнуления
							reset_pos = i + 1
							//Это предельное значение
							if i == locklen-1 {
								loop = true
							}
							link[i+1]++
							if i == locklen-2 && link[i+1] < scramble_len {
								//fmt.Println("Now trying " + string(letterRunes[link[locklen-1]]) + "****")
								fmt.Printf("Now trying "+string(used_chars[link[locklen-1]])+"**** - %.2f min\n", time.Since(ctime).Seconds()/60)
								ctime = time.Now()

							}
							break
						}
						if i == 0 {
							reset_pos = -1
							break
						}
						cur_pass = cur_pass + string(used_chars[link[i]])
					}
				}
				select {
				case <-sgnlCh:
					loop = true
				default:
				}
				if loop {
					break
				}
				sem.Acquire()
				go url_last_symbl(url+"_"+cur_pass, &used_chars, url_suffix, c, sgnlCh)
				link[0] = 50
			}
		}
	}()

	go func() {
		for {
			time.Sleep(time.Minute)
			c <- ""
		}
	}()


	fi, err := os.OpenFile("txtfiles\\links.txt", os.O_RDWR|os.O_APPEND|os.O_CREATE, 0777)
	if err != nil {
		panic(err)
	}
	defer fi.Close()
	for {
		text := <-c

		switch text {
		case "":
			fmt.Println("Passed 1 min, tries - ", tries_counter*26)
			mu.Lock()
			tries_counter = 0
			mu.Unlock()
		default:
			_, err = fi.WriteString(text + "\n")
			if err != nil {
				panic(err)
			}
		}
	}
}

func url_last_symbl(link string,used_chars *[]rune, url_suffix string, c chan string, sgnlCh chan struct{}) {
	defer sem.Release()
	select {
	case <-sgnlCh:
		return
	default:
	}
	for i := 0; i < len(*used_chars); i++ {
//		fmt.Println("Solved: " , i,string((*used_chars)[i]))
		check_url(link+string((*used_chars)[i])+url_suffix, c, sgnlCh)
	}

}

func check_url(link string, c chan string, sgnlCh chan struct{}) {

	var client = &http.Client{}
	var res *http.Response
//	fmt.Println("Checking: " + baseurl + link)
	for res == nil {
		res, _ = client.Head(baseurl + link)
		if res == nil {
			time.Sleep(time.Second)
		} else if res.StatusCode == 200 {
			fmt.Println("Solved: " + link)
			c <- (link)
			close(sgnlCh)
		} else {
			break
		}
	}
}
